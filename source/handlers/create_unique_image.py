from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.base import StorageKey
from aiogram.types import Message
from aiogram import Router
from aiogram.filters import Text
from config import ACTIVE_USERS_STORAGE
from buttons import keyboard_stop_image_unique_configured, keyboard_start_image_unique_configured
from states.unique_image_video import StepsUniqueImageVideo
from aiogram import Bot
from tools.get_unique_photo import UniquePhoto
from tools.get_unique_video import UniqueVideo
from tools.editor_tools import EditorTools

router = Router()


@router.message(Text(text='üåÑ –£–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–µ–¥–∏–∞ üì∑'))
async def start_unique(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–∏. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –≤—ã–±–æ—Ä —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ"""
    await state.clear()
    await state.set_state(StepsUniqueImageVideo.load_image_video)
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–º –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–Ω–µ—Å–∏—Ç–µ –≤ —á–∞—Ç\n\n'
                         '‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–æ, —á—Ç–æ –≤ Telegram –µ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞'
                         ' –§–∞–π–ª –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 20 –ú–ë‚ö†Ô∏è\n\n'
                         '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é, —Ç–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ',
                         reply_markup=keyboard_stop_image_unique_configured)


@router.message(Text(text='‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å'))
async def stop_proccess_unique(message: Message, state: FSMContext, bot_object: Bot):
    data = await ACTIVE_USERS_STORAGE.get_data(
        bot=bot_object,
        key=StorageKey(bot_id=bot_object.id, chat_id=message.chat.id, user_id=message.from_user.id)
    )

    if 'task_obj' in data:
        print("[USER]: STOP UNIQUE")
        data['task_obj'].cancel()

    if 'ffmpeg_proccess' in data:
        print("[USER]: STOP FFMPEG")
        data['ffmpeg_proccess'].kill()

    await EditorTools.remove_temp_video_files()
    await EditorTools.remove_temp_photo_files()
    await state.clear()
    await message.answer(
        '–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞. –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–≤—ã–º –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É (üåÑ –£–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–µ–¥–∏–∞ üì∑)',
        reply_markup=keyboard_start_image_unique_configured)


@router.message(StepsUniqueImageVideo.load_image_video)
async def proccess_unique_file(message: Message, state: FSMContext, bot_object: Bot):
    if message.photo:
        file_id = message.photo[-1].file_id
        await UniquePhoto().run_get_unique_photo_save_coroutine(file_id, bot_object, message, state)

    elif message.video:
        file_id = message.video.file_id
        await UniqueVideo().run_get_unique_video_save_coroutine(file_id, bot_object, message, state)

    elif message.document:
        if message.document.mime_type[:5] == 'image':
            file_id = message.document.file_id
            await UniquePhoto().run_get_unique_photo_save_coroutine(file_id, bot_object, message, state)
        elif message.document.mime_type[:5] == 'video':
            file_id = message.document.file_id
            await UniqueVideo().run_get_unique_video_save_coroutine(file_id, bot_object, message, state)
        else:
            await message.answer('–û–∂–∏–¥–∞–ª–æ—Å—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æü§∑‚Äç‚ôÇÔ∏è\n\
                                  –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')

    else:
        await message.answer('–û–∂–∏–¥–∞–ª–æ—Å—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æü§∑‚Äç‚ôÇÔ∏è\n\
                              –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–Ω–æ–ø–∫–∏ (‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å)')

